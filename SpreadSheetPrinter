import java.util.Arrays;

public class SpreadSheetPrinter{
    private static int [][] sheet; 
    private static int columnLength;
    private static int rowLength;
    String cellLabel;
    public static void main (String[]args){
        columnLength = args[0].charAt(0)-64;
        rowLength = getInteger(args[1]);
        sheet = new int [rowLength][columnLength];
        if (validateRange(args)){
            printColumnHeaders(args[0].charAt(0), rowLength);
        }
        String [] input = Arrays.copyOfRange(args,2,args.length+1);
        getCellValue('A',2, input);
    }
/**
* @param col the column of the desired cell
* @param row the row of the desired cell
* @param input the command line input, WITHOUT the spreadsheet range specifications. In other
words, args[0] and args[1] have been removed
* @return the value of the given cell specified in the input, or a blank space if no value
was specified in the input array
 */
    public static String getCellValue(char column, int row, String[] input){
       
        for (int i = 0; i < input.length; i++){
            if(input[i] == column + (row + "")){
                return input[i+1];
            }
        }
        return "";
    }
    // public static boolean isCurrent(char col, int row, String cellLabel){

    //     if (cellLabel == col + (row + "")){
    //         return true;
    //     }
    //     else {
    //         return false;
    //     }
    // }

    public static void printColumnHeaders(char columnLength, int rowLength){        
        for (char c = 'A'; c <= columnLength; c++){
            char currentLetter = c;
            if (currentLetter == 'A'){
            System.out.print("   " + "\t" + currentLetter);
            }
            else {
                System.out.print("\t" + currentLetter);
            }
        }
        for (int r = 0; r <= rowLength; r++){
            if(r > 0){
                System.out.println(r + "\t \t");      
            }
            System.out.println();
        }   
    }
/**
* Check all cell labels to make sure they are an upper case character followed by an integer,
and that both the column and row are within the specified range.
* @param input the command line input, WITHOUT the spreadsheet range specifications. In other
words, args[0] and args[1] have been removed 
* @param lastCol last valid column letter
* @param lastRow last valid row number
* @return the first invalid cell label if there is one, otherwise null 
*/

    public static String validateAllCellLabels(String[] input, char lastCol, int row){
        for (int i = 0; i < input.length; i+=2){
            if (input[i] != lastCol + (row + "")){
                return input [i];
            }
        }
        return null;
    }
/**
* Checks all cell values to make sure they are numbers - can be ints or doubles
* @param input the command line input, WITHOUT the spreadsheet range specifications. In other
words, args[0] and args[1] have been removed
* @return the first invalid value if there is one, otherwise null */

    public static String validateAllCellValues(String[] input){
        for (int i = 1; i < input.length; i+=2){
            if (!isValidDouble(input[i]) && !isValidInt(input[i])){
                return input[i];
            }
        }
        return null;
    }
    public static boolean validateRange(String[]args){
        columnLength = args[0].charAt(0)-64;
        rowLength = getInteger(args[1]);
        if ((rowLength >= 1) &&  (columnLength > 0 && columnLength <=26)){
            return true;
        }
        else{
        return false;
        }
    }

    public static int getInteger(String letter){
        try{
            return Integer.parseInt(letter);
        } catch (NumberFormatException e){
            return -1;
        }
    }
    public static boolean isValidDouble(String token){
        try {
            Double.parseDouble(token);
            return true;
        } catch (NumberFormatException s){
            return false;
        }
    }
    private static boolean isValidInt(String token){
        try {
            Integer.parseInt(token);
            return true;
        } catch (NumberFormatException s){
            return false;
            }
    }
}
    // public static void error1(){ 
    //     System.out.println("Please specify a valid spreadsheet range, with highest column between A and Z and highest row as an integer");
    //     }
    // public static void error2(){ 
    //     System.out.println("Please specify a valid spreadsheet range, with highest column between A and Z and highest row as an integer");
    //     }
    // public static void error3(){ 
    //     System.out.println("Please specify a valid spreadsheet range, with highest column between A and Z and highest row as an integer");
    //     }
    // public static void error4(){
    //     System.out.println("Invalid input: must specify at least highest column and row");
    //     }
    // public static void error5(){
    //     System.out.println("Invalid input: must specify the spreadsheet range, followed by cell-value pairs. You entered an odd number of inputs");
    //     }
    // public static void error6(){ 
    //     System.out.println("Invalid cell label: " + ); // followed by cell label
    //     }
    // public static void error7(String[] input){ 
    //     System.out.println("Invalid cell value: " + input); //followed by cell value
    //     }
    // }
